<document xmlns="http://cnx.rice.edu/cnxml">

<title>3. Traffic Light Station</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m36720</md:content-id>
  <md:title>3. Traffic Light Station</md:title>
  <md:abstract/>
  <md:uuid>1458fcb6-3c27-4798-a2d2-2c2e3cdd88a9</md:uuid>
</metadata>

<content>
  <section id="eip-528"><title>Introduction</title><para id="eip-70">Without Traffic lights, most of you wouldn’t be here today. Such simple little things, but if they break, chaos erupts. You’ve started to make a name for yourself as a hot-shot programmer and the Traffic Department wants to put some of your skills to use solving Cape Town’s traffic problems for the 2010 soccer world cup.</para></section><section id="eip-69"><title>Programming tasks</title><section id="eip-848"><title>Task 1 - Flashing red when down</title><para id="eip-62">When the traffic lights fail, traffic must still flow. Have you ever seen traffic lights flashing red? If something goes wrong in the control system, real traffic lights try to tell all the cars that something is wrong and that the intersection now functions as a stop street. They do that by flashing the red light continuously. Try writing a program to flash the red light once.</para></section><section id="eip-738"><title>Task 2 - Flashing red three times</title><para id="eip-928">Flashing the red light once is good, but it’s not enough! Let’s flash the red light on and off three times.</para></section><section id="eip-454"><title>Task 3 - Flashing red continuously</title><para id="eip-583">Can you make it flash forever without taking forever to write the program? </para></section><section id="eip-703"><title>Task 4 - Normal sequence of lights</title><para id="eip-462">Ok, so the backup system works. Can you write the normal green, orange, red cycle? </para></section><section id="eip-858"><title>Task 5 - Pedestrian crossing</title><para id="eip-99">A little further down the road is a different traffic light, and this one is for pedestrians. Can you write a program to let a pedestrian cross when they press the button? The light should remain green. When a pedestrian presses the button it should turn orange and then red to allow the pedestrian to cross. After that it should turn back to green and be ready for the next pedestrian.
</para><para id="eip-434">HINT: Use 'Wait for' block to wait for a button to be pressed</para></section><section id="eip-160"><title>Task 6 - Wait for more pedestrians</title><para id="eip-424">Pedestrians have been crossing the road in drips and drabs, slowing the traffic down unnecessarily. Can you write a program that only changes the light when three pedestrians have pressed the button?</para><para id="eip-668">HINT: Use the “Pulse Counter”
The Pulse Counter works the same as the Wait button, except that it waits until it has been pressed the set amount of times before it allows the program to continue.</para></section><section id="eip-844"><title>Task 7 - Real-time feedback</title><para id="eip-592">This solution helps to reduce the traffic delays, but the pedestrians quickly notice that if they keep on pressing the button the light changes without having to wait for another pedestrian. Can you change the program so that the light is always green and only red whenever the button is pressed in?
</para><para id="eip-798">HINT: Use the “Digital Branch” to make a decision</para></section><section id="eip-902"><title>Task 8 - Flashing a precise number of times</title><para id="eip-324">Remember how we were able to make the red light flash once, thrice or for ever. Can you make it flash very quickly for thirty times without switching the light on and off thirty times? What if we want to make it flash 1000 times? There must be an easier way than using the on and off command 1000 times? Write a program that shows a green light and when the button is pressed flashes the red light very quickly for thirty times before turning green again.


</para><para id="eip-740">HINT: Use the “Counter Loop”.</para></section><section id="eip-541"><title>Task 9 - Sub Programs</title><para id="eip-419">Task 1. Often we will find tasks that we need to repeat. For example we might want to flash the red light thirty times in different parts of our program. Instead of re-writing that part using the counter loop every time we need it, we can create our own block or sub-program to do that. Then our program from Task 8. will look much simpler. Then whenever and as often as we need to we can use this sub-program to flash the red light thirty times. We can put anything we want in a sub-program and it helps us to simplify our programs. Turn your counter loop from Task 8 into a sub-program.</para></section><section id="eip-183"><title>Task 10 - Combining the pieces</title><para id="eip-826">Now use all the tools you have learnt in the previous tasks and write a program which runs the regular traffic light sequence. When a pedestrian presses the button the lights need to switch to red and quickly flash thirty times to allow time for the pedestrian to cross before resuming the regular sequence. </para></section><section id="eip-441"><title>Bonus tasks</title><para id="eip-162">The Traffic Department is well pleased with your efforts. Someone asks whether it is possible to adjust the brightness of the traffic lights - he believes it should only shine at 60% instead of 100% brightness. Can you do that?</para></section><para id="eip-756"/><para id="eip-317"/></section><para id="delete_me">
     <!-- Insert module text here -->
  </para>
</content>

</document>